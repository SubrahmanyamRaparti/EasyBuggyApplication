pipeline {
    agent any
    // Using maven tool for SCA.
    tools {
        maven 'mvn_v3.9.2'
    }
    environment {
        AWS_REGION = getregion()
        AWS_ACCOUNT_ID = getaccount()
        DOCKER_TAG = committag()
        APP_REPLICAS = 2
        NAMESPACE_NAME = "easybuggyapplication"
    }
    stages {
        stage ("Clean Workspace") {
            steps{
                script {
                    cleanWs()
                }
            }
        }
        stage ("Source code checkout") {
            steps {
                git branch: "${env.BRANCH_NAME}", url: 'https://github.com/SubrahmanyamRaparti/easy-buggy-application.git'
            }
        }
        stage ("Sonar Cloud Analysis - SAST") {
            agent {
                docker { image 'maven:3.9.2-amazoncorretto-11'
                reuseNode true
                }
            }
            environment {
                SONAR_CREDENTIALS = credentials('sonar_credentials')
            }
            steps {
                sh 'mvn clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
                        -Dsonar.login=$SONAR_CREDENTIALS_PSW \
                        -Dsonar.host.url=https://sonarcloud.io \
                        -Dsonar.organization=subrahmanyam \
                        -Dsonar.projectKey=$SONAR_CREDENTIALS_USR'
            }
        }
        stage ("Snyk Analysis - SCA") {
            steps {
                snykSecurity(
                    failOnIssues: false,
                    failOnError: true,
                    organisation: 'subrahmanyamraparti',
                    projectName: 'EasyBuggyApplication',
                    snykInstallation: 'snyk_latest',
                    snykTokenId: 'snyk_api'
                )
            }
        }
        stage ("Build & Verify") {
            agent {
                docker { image 'maven:3.9.2-amazoncorretto-11'
                reuseNode true
                }
            }
            steps {
                sh 'mvn -B clean verify'  // Lifecycles: validate, compile, test, package, verify
            }
        }
        stage ("Build Docker Image") {
            steps {
                sh 'docker build --compress -t easybuggyapplication:latest .'
                sh 'docker tag easybuggyapplication:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/easybuggyapplication:latest'
                sh 'docker tag easybuggyapplication:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/easybuggyapplication:$DOCKER_TAG'
            }
        }
        stage ("Push Docker Image to AWS ECR") {
            steps {
                sh 'aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com'
                sh 'docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/easybuggyapplication:latest'
                sh 'docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/easybuggyapplication:$DOCKER_TAG'
                sh 'docker logout'
            }
        }
        stage ("Deploy image on to kubernetes") {
            steps {
                withKubeConfig(credentialsId: 'kubernetes_key', namespace: 'easybuggyapplication', restrictKubeConfigAccess: true, serverUrl: 'https://172.31.12.214:6443') {
                    sh 'kubectl create namespace ${NAMESPACE_NAME} || true'
                    sh 'kubectl create secret docker-registry regcred \
                          --docker-server=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com \
                          --docker-username=AWS \
                          --docker-password=$(aws ecr get-login-password) \
                          --namespace=${NAMESPACE_NAME} || true'
                    sh 'sed -i "s/<aws_account_id>/$AWS_ACCOUNT_ID/g" ./k8s-manifest-files/ecr-credentials.yaml'
                    sh 'sed -i "s/<aws_region>/$AWS_REGION/g" ./k8s-manifest-files/ecr-credentials.yaml'
                    sh 'envsubst < ./k8s-manifest-files/application-manifest.yaml.tpl > ./k8s-manifest-files/application-manifest.yaml'
                    sh 'kubectl apply -f ./k8s-manifest-files/.'
                }
            }
        }
        stage ("Clean up local docker images") {
            steps {
                sh 'docker image rm easybuggyapplication:latest'
                sh 'docker image rm $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/easybuggyapplication:latest'
                sh 'docker image rm $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/easybuggyapplication:$DOCKER_TAG'
            }
        }
    }
}

def committag() {
    def tag = sh returnStdout: true, script: 'git rev-parse --short HEAD'
    return tag
}

def getregion() {
    def region = sh returnStdout: true, script: 'curl -s  http://169.254.169.254/latest/meta-data/placement/region'
    return region
}

def getaccount() {
    def account = sh returnStdout: true, script: 'aws sts get-caller-identity | jq ".Account" -r'
    return account.replaceAll("\\s","")
}